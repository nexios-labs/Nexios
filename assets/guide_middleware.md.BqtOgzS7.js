import{_ as i,c as a,o as e,ah as n}from"./chunks/framework.C_cZWXvK.js";const c=JSON.parse('{"title":"Middleware","description":"","frontmatter":{"icon":"jsfiddle"},"headers":[],"relativePath":"guide/middleware.md","filePath":"guide/middleware.md"}'),l={name:"guide/middleware.md"};function t(r,s,p,h,d,k){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="middleware" tabindex="-1">Middleware <a class="header-anchor" href="#middleware" aria-label="Permalink to ‚ÄúMiddleware‚Äù">‚Äã</a></h1><p>Middleware in Nexios is a powerful feature that allows you to intercept, process, and modify requests and responses as they flow through your application. It acts as a pipeline, enabling you to implement cross-cutting concerns such as logging, authentication, validation, and response modification in a modular and reusable way. This documentation provides a comprehensive guide to understanding and using middleware in Nexios.</p><hr><h2 id="ü§∑‚Äç‚ôÇÔ∏è-how-middleware-works" tabindex="-1">ü§∑‚Äç‚ôÇÔ∏è <strong>How Middleware Works</strong> <a class="header-anchor" href="#ü§∑‚Äç‚ôÇÔ∏è-how-middleware-works" aria-label="Permalink to ‚Äúü§∑‚Äç‚ôÇÔ∏è How Middleware Works‚Äù">‚Äã</a></h2><p>Middleware functions are executed in a sequence, forming a pipeline that processes incoming requests and outgoing responses. Each middleware function has access to the request (<code>req</code>), response (<code>res</code>), and a <code>next</code> function to pass control to the next middleware or the final route handler.</p><h3 id="key-responsibilities-of-middleware" tabindex="-1"><strong>Key Responsibilities of Middleware</strong> <a class="header-anchor" href="#key-responsibilities-of-middleware" aria-label="Permalink to ‚ÄúKey Responsibilities of Middleware‚Äù">‚Äã</a></h3><ul><li><strong>Modify the Request</strong> ‚Äì Add headers, parse data, or inject additional context.</li><li><strong>Block or Allow Access</strong> ‚Äì Enforce authentication, rate limiting, or other access controls.</li><li><strong>Modify the Response</strong> ‚Äì Format responses, add headers, or compress data.</li><li><strong>Pass Control</strong> ‚Äì Call <code>next()</code> to continue processing the request or terminate early.</li></ul><h2 id="üß¢-basic-middleware-example" tabindex="-1">üß¢ <strong>Basic Middleware Example</strong> <a class="header-anchor" href="#üß¢-basic-middleware-example" aria-label="Permalink to ‚Äúüß¢ Basic Middleware Example‚Äù">‚Äã</a></h2><p>Below is a simple example demonstrating how to define and use middleware in a Nexios application:</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nexios </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NexiosApp</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> datetime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> datetime</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NexiosApp()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Middleware 1: Logging</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> my_logger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req, res, next):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Received request: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">req.method</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">req.path</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Pass control to the next middleware or handler</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Middleware 2: Request Timing</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> request_time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req, res, next):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    req.request_time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> datetime.now()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Store request time in context</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Middleware 3: Cookie Validation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> validate_cookies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req, res, next):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;session_id&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> req.cookies:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.json({</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Missing session_id cookie&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">status_code</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">400</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Add middleware to the application</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.add_middleware(my_logger)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.add_middleware(request_time)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.add_middleware(validate_cookies)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Route Handler</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@app.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hello_world</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req, res):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.text(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">üí°Tip</p><p>All code before <code>await next()</code> is executed before the route handler.</p></div><h2 id="üîó-order-of-execution" tabindex="-1">üîó <strong>Order of Execution</strong> <a class="header-anchor" href="#üîó-order-of-execution" aria-label="Permalink to ‚Äúüîó Order of Execution‚Äù">‚Äã</a></h2><p>Middleware functions are executed in the order they are added. The flow of execution is as follows:</p><ol><li><strong>Pre-Processing</strong> ‚Äì Middleware functions execute before the route handler.</li><li><strong>Route Handler</strong> ‚Äì The request is processed by the route handler.</li><li><strong>Post-Processing</strong> ‚Äì Middleware functions execute after the route handler.</li></ol><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>   Incoming request</span></span>
<span class="line"><span> ‚îî‚îÄ‚îÄ&gt; Middleware 1 (logs)</span></span>
<span class="line"><span>       ‚îî‚îÄ‚îÄ&gt; Middleware 2 (auth check)</span></span>
<span class="line"><span>             ‚îî‚îÄ‚îÄ&gt; Route handler (e.g., /profile)</span></span>
<span class="line"><span>                   ‚îî‚îÄ‚îÄ&gt; Response is built</span></span>
<span class="line"><span>             ‚Üê‚îÄ‚îÄ‚îÄ‚îÄ Middleware 2 resumes (e.g., modify response)</span></span>
<span class="line"><span>       ‚Üê‚îÄ‚îÄ‚îÄ‚îÄ Middleware 1 resumes</span></span>
<span class="line"><span>‚Üê‚îÄ‚îÄ‚îÄ‚îÄ Final response sent</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">üí°Tip</p><p>Middleware functions are executed in the order they are added. Ensure that middleware with dependencies (e.g., authentication before authorization) is added in the correct sequence.</p></div><hr><h2 id="ü§∑‚Äç‚ôÇÔ∏è-what-is-cnext" tabindex="-1">ü§∑‚Äç‚ôÇÔ∏è What is <code>cnext</code>? <a class="header-anchor" href="#ü§∑‚Äç‚ôÇÔ∏è-what-is-cnext" aria-label="Permalink to ‚Äúü§∑‚Äç‚ôÇÔ∏è What is cnext?‚Äù">‚Äã</a></h2><p>In Nexios, middleware functions rely on a continuation callback (commonly called next, cnext, or callnext) to pass control to the next stage of the request pipeline. This parameter is crucial for request flow but its name is completely flexible ‚Äî you&#39;re free to call it whatever makes sense for your codebase.</p><h2 id="üíù-class-based-middleware" tabindex="-1">üíù <strong>Class-Based Middleware</strong> <a class="header-anchor" href="#üíù-class-based-middleware" aria-label="Permalink to ‚Äúüíù Class-Based Middleware‚Äù">‚Äã</a></h2><p>Nexios supports class-based middleware for better organization and reusability. A class-based middleware must inherit from <code>BaseMiddleware</code> and implement the following methods:</p><ul><li><strong><code>process_request(req, res, cnext)</code></strong> ‚Äì Executed before the request reaches the handler.</li><li><strong><code>process_response(req, res)</code></strong> ‚Äì Executed after the handler has processed the request.</li></ul><h3 id="example-class-based-middleware" tabindex="-1"><strong>Example: Class-Based Middleware</strong> <a class="header-anchor" href="#example-class-based-middleware" aria-label="Permalink to ‚ÄúExample: Class-Based Middleware‚Äù">‚Äã</a></h3><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nexios.middlewares </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BaseMiddleware</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ExampleMiddleware</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BaseMiddleware</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process_request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, req, res, cnext):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;Executed before the request handler.&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Processing Request:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, req.method, req.url)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cnext(req, res)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Pass control to the next middleware or handler</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process_response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, req, res):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;Executed after the request handler.&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Processing Response:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, res.status_code)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Must return the modified response</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="üòé-method-breakdown" tabindex="-1">üòé <strong>Method Breakdown</strong> <a class="header-anchor" href="#üòé-method-breakdown" aria-label="Permalink to ‚Äúüòé Method Breakdown‚Äù">‚Äã</a></h3><ol><li><strong><code>process_request(req, res, cnext)</code></strong><ul><li>Used for pre-processing tasks like logging, authentication, or data injection.</li><li>Must call <code>await cnext(req, res)</code> to continue processing.</li></ul></li><li><strong><code>process_response(req, res)</code></strong><ul><li>Used for post-processing tasks like modifying the response or logging.</li><li>Must return the modified <code>res</code> object.</li></ul></li></ol><hr><h2 id="üòÅ-route-specific-middleware" tabindex="-1">üòÅ <strong>Route-Specific Middleware</strong> <a class="header-anchor" href="#üòÅ-route-specific-middleware" aria-label="Permalink to ‚ÄúüòÅ Route-Specific Middleware‚Äù">‚Äã</a></h2><p>Route-specific middleware applies only to a particular route. This is useful for applying middleware logic to specific endpoints without affecting the entire application.</p><h3 id="example-route-specific-middleware" tabindex="-1"><strong>Example: Route-Specific Middleware</strong> <a class="header-anchor" href="#example-route-specific-middleware" aria-label="Permalink to ‚ÄúExample: Route-Specific Middleware‚Äù">‚Äã</a></h3><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> auth_middleware</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req, res, cnext):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> req.headers.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Authorization&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.json({</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Unauthorized&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">status_code</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">401</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cnext(req, res)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@app.route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/profile&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;GET&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">middlewares</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[auth_middleware])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_profile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req, res):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.json({</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Welcome to your profile!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>‚öôÔ∏è Execution Order:</strong><br><code>auth_middleware ‚Üí get_profile handler ‚Üí response sent</code></p><hr><h2 id="‚òùÔ∏è-router-specific-middleware" tabindex="-1">‚òùÔ∏è <strong>Router-Specific Middleware</strong> <a class="header-anchor" href="#‚òùÔ∏è-router-specific-middleware" aria-label="Permalink to ‚Äú‚òùÔ∏è Router-Specific Middleware‚Äù">‚Äã</a></h2><p>Router-specific middleware applies to all routes under a specific router. This is useful for grouping middleware logic for a set of related routes.</p><h3 id="example-router-specific-middleware" tabindex="-1"><strong>Example: Router-Specific Middleware</strong> <a class="header-anchor" href="#example-router-specific-middleware" aria-label="Permalink to ‚ÄúExample: Router-Specific Middleware‚Äù">‚Äã</a></h3><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">admin_router </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Router()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> admin_auth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req, res, cnext):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> req.headers.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Admin-Token&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.json({</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Forbidden&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">status_code</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">403</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cnext(req, res)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">admin_router.add_middleware(admin_auth)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Applies to all routes inside admin_router</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@admin_router.route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/dashboard&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;GET&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> dashboard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req, res):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.json({</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Welcome to the admin dashboard!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.mount_router(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, admin_router)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Mount router at &quot;/admin&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><strong>Execution Order:</strong><br><code>admin_auth ‚Üí dashboard handler ‚Üí response sent</code></p><hr><h2 id="üíù-using-use-for-route-decorator" tabindex="-1">üíù <strong>Using <code>@use_for_route</code> Decorator</strong> <a class="header-anchor" href="#üíù-using-use-for-route-decorator" aria-label="Permalink to ‚Äúüíù Using @use_for_route Decorator‚Äù">‚Äã</a></h2><p>The <code>@use_for_route</code> decorator binds a middleware function to specific routes or route patterns, ensuring that the middleware only executes when a matching route is accessed.</p><h3 id="example-use-for-route-decorator" tabindex="-1"><strong>Example: <code>@use_for_route</code> Decorator</strong> <a class="header-anchor" href="#example-use-for-route-decorator" aria-label="Permalink to ‚ÄúExample: @use_for_route Decorator‚Äù">‚Äã</a></h3><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nexios.middleware.utils </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> use_for_route</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@use_for_route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/dashboard&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> log_middleware</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req, res, cnext):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;User accessed </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">req.path.url</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cnext(req, res)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Proceed to the next function (handler or middleware)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><hr><p>Always call <code>await next()</code> in middleware to ensure the request continues processing. Failing to do so will block the request pipeline.</p><div class="warning custom-block"><p class="custom-block-title">‚ö†Ô∏è Warning</p><p>Avoind modifying the request object in middleware. This can lead to unexpected behavior or security issues.</p></div><div class="warning custom-block"><p class="custom-block-title">‚ö†Ô∏è Warning</p><p>Modifying the response object should be done after the request is processed. It&#39;s best to use the <code>process_response</code> method of middleware or <code>callnext</code></p></div>`,47)]))}const g=i(l,[["render",t]]);export{c as __pageData,g as default};
