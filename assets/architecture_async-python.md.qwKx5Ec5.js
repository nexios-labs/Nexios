import{_ as i,c as a,o as n,ah as e}from"./chunks/framework.C_cZWXvK.js";const d=JSON.parse('{"title":"Async Python","description":"","frontmatter":{},"headers":[],"relativePath":"architecture/async-python.md","filePath":"architecture/async-python.md"}'),t={name:"architecture/async-python.md"};function l(h,s,p,r,k,o){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="async-python" tabindex="-1">Async Python <a class="header-anchor" href="#async-python" aria-label="Permalink to “Async Python”">​</a></h1><p>Async programming in Python lets you write code that <em>doesn’t block</em> like a traffic jam 🚦. It’s perfect for when you&#39;re dealing with stuff like APIs, files, or databases — all the I/O things that love to take their sweet time. Instead of waiting around, your code keeps moving 🕺💃.</p><p>This guide is your joyful walkthrough of async magic — especially how <strong>Nexios</strong> uses it to stay blazing fast and super flexible ⚡💚.</p><hr><h2 id="🎭-what-even-is-async" tabindex="-1">🎭 What Even <em>Is</em> Async? <a class="header-anchor" href="#🎭-what-even-is-async" aria-label="Permalink to “🎭 What Even Is Async?”">​</a></h2><p>Think of async like this:</p><p>While waiting for a pot of jollof to simmer 🍚🔥, you don’t just stare at it — you chop onions, text a friend, maybe even start a new song. That’s <strong>async</strong>: doing more while waiting.</p><hr><h2 id="🧠-core-concepts-–-the-cast-of-async" tabindex="-1">🧠 Core Concepts – The Cast of Async <a class="header-anchor" href="#🧠-core-concepts-–-the-cast-of-async" aria-label="Permalink to “🧠 Core Concepts – The Cast of Async”">​</a></h2><p>Let’s meet the stars of this async show:</p><h3 id="🌀-coroutine" tabindex="-1">🌀 <strong>Coroutine</strong> <a class="header-anchor" href="#🌀-coroutine" aria-label="Permalink to “🌀 Coroutine”">​</a></h3><p>This is a <em>special</em> kind of function that uses <code>async def</code>. It can <strong>pause</strong> (<code>await</code>) and <strong>resume</strong> later. It doesn’t block other things — it chills while others do their thing. 😎</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> make_jollof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Boiling rice...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> asyncio.sleep(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Rice done!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><hr><h3 id="🎡-event-loop" tabindex="-1">🎡 <strong>Event Loop</strong> <a class="header-anchor" href="#🎡-event-loop" aria-label="Permalink to “🎡 Event Loop”">​</a></h3><p>The <em>event loop</em> is the DJ 🎧 of your async party — it keeps spinning tracks (tasks), switching between coroutines, making sure no one hogs the dance floor.</p><p>When you call <code>asyncio.run(...)</code>, you’re telling the DJ to start spinning.</p><hr><h3 id="⏳-await" tabindex="-1">⏳ <strong>Await</strong> <a class="header-anchor" href="#⏳-await" aria-label="Permalink to “⏳ Await”">​</a></h3><p>Used to <strong>pause</strong> a coroutine until another coroutine or async task finishes. Like saying:</p><blockquote><p>“I’ll wait, but go ahead and do other stuff in the meantime.”</p></blockquote><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> asyncio.sleep(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><hr><h3 id="📋-task" tabindex="-1">📋 <strong>Task</strong> <a class="header-anchor" href="#📋-task" aria-label="Permalink to “📋 Task”">​</a></h3><p>A coroutine wrapped and scheduled by the event loop. Basically saying:</p><blockquote><p>“Hey, run this in the background while I do something else.”</p></blockquote><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">task </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> asyncio.create_task(make_jollof())</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Now your code can juggle multiple things like a pro 🤹‍♂️.</p><hr><h3 id="🧠-why-nexios-❤️-async" tabindex="-1">🧠 Why Nexios ❤️ Async <a class="header-anchor" href="#🧠-why-nexios-❤️-async" aria-label="Permalink to “🧠 Why Nexios ❤️ Async”">​</a></h3><p>Nexios is built with <strong>async at its core</strong> to deliver:</p><ul><li><strong>High speed responses</strong> ⚡</li><li><strong>Zero blocking</strong> for APIs and websockets 🧵</li><li><strong>Efficient I/O</strong> for databases, file systems, etc.</li><li><strong>Perfect for real-time apps</strong> like chat, video, or dashboards 📡</li></ul><p>Basically, Nexios uses async because… it’s smart tech for smart devs like you.</p><hr><h2 id="🧰-the-asyncio-toolbox" tabindex="-1">🧰 The <code>asyncio</code> Toolbox <a class="header-anchor" href="#🧰-the-asyncio-toolbox" aria-label="Permalink to “🧰 The asyncio Toolbox”">​</a></h2><p>Python ships with the <code>asyncio</code> module — the real MVP here.</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> asyncio</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello from async land!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">asyncio.run(main())</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>💡 <code>asyncio.run()</code> kicks off the event loop and runs your coroutine.</p><hr><h2 id="🍿-making-async-functions" tabindex="-1">🍿 Making Async Functions <a class="header-anchor" href="#🍿-making-async-functions" aria-label="Permalink to “🍿 Making Async Functions”">​</a></h2><p>They’re built using <code>async def</code> and always return coroutine objects.</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch_data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Fetching...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> asyncio.sleep(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Data ready!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><hr><h2 id="🛑-awaiting-stuff-without-freezing-your-app" tabindex="-1">🛑 Awaiting Stuff (Without Freezing Your App) <a class="header-anchor" href="#🛑-awaiting-stuff-without-freezing-your-app" aria-label="Permalink to “🛑 Awaiting Stuff (Without Freezing Your App)”">​</a></h2><p>Use <code>await</code> to let your code take a breather while something else finishes.</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fetch_data()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">asyncio.run(main())</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><hr><h2 id="🔄-async-context-managers" tabindex="-1">🔄 Async Context Managers <a class="header-anchor" href="#🔄-async-context-managers" aria-label="Permalink to “🔄 Async Context Managers”">​</a></h2><p>Just like <code>with</code>, but async-ready! Used for things like DB connections or streams that need a setup + cleanup.</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AsyncThing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __aenter__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Start using&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __aexit__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, exc_type, exc, tb):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Cleaned up&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AsyncThing() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> thing:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Using async thing&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">asyncio.run(main())</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><hr><h2 id="🛠️-handling-errors-gracefully" tabindex="-1">🛠️ Handling Errors Gracefully <a class="header-anchor" href="#🛠️-handling-errors-gracefully" aria-label="Permalink to “🛠️ Handling Errors Gracefully”">​</a></h2><p>Yup, <code>try</code>/<code>except</code> works fine in async too.</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fetch_data()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    except</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Exception</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Oops! </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">asyncio.run(main())</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><hr><h2 id="✅-best-practices-aka-the-async-cheat-code-🎮" tabindex="-1">✅ Best Practices (aka The Async Cheat Code 🎮) <a class="header-anchor" href="#✅-best-practices-aka-the-async-cheat-code-🎮" aria-label="Permalink to “✅ Best Practices (aka The Async Cheat Code 🎮)”">​</a></h2><ul><li>✨ Use <code>asyncio.run()</code> as your app entry point</li><li>💤 Swap <code>time.sleep()</code> with <code>await asyncio.sleep()</code> — no blocking allowed!</li><li>📦 Use <code>async with</code> for async resources</li><li>🧵 Don’t go crazy with tasks — too many = chaos</li></ul><hr><hr><h2 id="🎉-wrap-up" tabindex="-1">🎉 Wrap-Up <a class="header-anchor" href="#🎉-wrap-up" aria-label="Permalink to “🎉 Wrap-Up”">​</a></h2><p>Async Python isn’t just fast — it’s fun! And when you combine it with a sleek framework like <strong>Nexios</strong>, you&#39;re basically building with a rocket engine 🚀.</p><p>With a few <code>async def</code>s and <code>await</code>s, your apps become scalable, modern, and <em>so</em> much more responsive.</p><p>Wanna go deeper into how Nexios structures its async handlers or explore real-time features? I got you — just say the word 👇</p>`,63)]))}const y=i(t,[["render",l]]);export{d as __pageData,y as default};
